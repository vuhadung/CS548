package edu.stevens.cs548.clinic.service.web.rest.resources;

import java.net.URI;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;

import edu.stevens.cs548.clinic.service.dto.PatientDto;
import edu.stevens.cs548.clinic.service.dto.ProviderDto;
import edu.stevens.cs548.clinic.service.dto.TreatmentDto;
import edu.stevens.cs548.clinic.service.dto.util.ProviderDtoFactory;
import edu.stevens.cs548.clinic.service.dto.util.TreatmentDtoFactory;
import edu.stevens.cs548.clinic.service.ejb.IPatientServiceRemote;
import edu.stevens.cs548.clinic.service.ejb.IProviderService.ProviderServiceExn;
import edu.stevens.cs548.clinic.service.ejb.IProviderServiceRemote;
import edu.stevens.cs548.clinic.service.ejb.IPatientService.PatientServiceExn;
import edu.stevens.cs548.clinic.service.ejb.ProviderService;
import edu.stevens.cs548.clinic.service.representations.PatientRepresentation;
import edu.stevens.cs548.clinic.service.representations.ProviderRepresentation;
import edu.stevens.cs548.clinic.service.representations.TreatmentRepresentation;

@Path("/provider")
@RequestScoped
public class ProviderResource {

	final static Logger logger = Logger.getLogger(ProviderResource.class
			.getCanonicalName());

	@Context
	private UriInfo uriInfo;

	private ProviderDtoFactory providerDtoFactory;
	private TreatmentDtoFactory treatmentDtoFactory;

	public ProviderResource() {
		providerDtoFactory = new ProviderDtoFactory();
		treatmentDtoFactory = new TreatmentDtoFactory();
	}

	@Inject
	IProviderServiceRemote providerService;

	@GET
	@Path("site")
	@Produces("text/plain")
	public String getSiteInfo() {
		return providerService.siteInfo();
	}

	@POST
	@Consumes("application/xml")
	public Response addProvider(ProviderRepresentation providerRep) {
		try {
			ProviderDto dto = providerDtoFactory.createProviderDto();
			dto.setName(providerRep.getName());
			dto.setNpi(providerRep.getProviderId());
			long id = providerService.addProvider(dto);
			UriBuilder ub = uriInfo.getAbsolutePathBuilder().path("{id}");
			URI url = ub.build(Long.toString(id));
			return Response.created(url).build();
		} catch (ProviderServiceExn e) {
			throw new WebApplicationException();
		}
	}

	@GET
	@Path("/byNPI")
	@Produces("application/xml")
	public ProviderRepresentation getProviderByNPI(@QueryParam("id") String npi) {
		try {
			long key = Long.parseLong(npi);
			ProviderDto providerDto = providerService.getProviderByNpi(key);
			ProviderRepresentation providerRep = new ProviderRepresentation(
					providerDto, uriInfo);
			return providerRep;
		} catch (ProviderServiceExn e) {
			throw new WebApplicationException(403);
		}
	}

	@GET
	@Path("{id}")
	@Produces("application/xml")
	public ProviderRepresentation getProvider(@PathParam("id") String id) {
		try {
			long key = Long.parseLong(id);
			ProviderDto providerDto = providerService.getProvider(key);
			ProviderRepresentation providerRep = new ProviderRepresentation(
					providerDto, uriInfo);
			return providerRep;
		} catch (ProviderServiceExn e) {
			throw new WebApplicationException(403);
		}
	}

	@POST
	@Path("{pid}/treatments")
	@Consumes("application/xml")
	public Response addTreatment(@HeaderParam("X-Patient") String patientURI,
			@PathParam("pid") String pid) {
		try {
			/*
			 * long patientId = Long.parseLong(patientURI.substring(patientURI
			 * .lastIndexOf('/') + 1));
			 */
			long patientId;
			long providerNPI = Long.parseLong(pid);
			String[] segments = patientURI.split("/");
			if (segments != null && segments.length > 0) {
				patientId = Long.parseLong(segments[segments.length - 1]);
				//Unclear
				TreatmentDto treatmentDto = treatmentDtoFactory.createTreatmentDto();
				providerService.addTreatment(patientId, providerNPI,
						treatmentDto);
			}
			return Response.status(201);
		} catch (ProviderServiceExn e) {
			throw new WebApplicationException();
		}
	}

}
